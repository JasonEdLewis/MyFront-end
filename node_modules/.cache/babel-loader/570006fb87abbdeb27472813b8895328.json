{"ast":null,"code":"import { REQUESTING, POST_SUCCESS, POST_FAILURE, CREATE_POST, DELETE_LIKE, ADD_LIKE, EDIT_POST_CAPTION, DELETE_POST } from './types';\nimport axios from 'axios';\nexport const getPost = () => dispatch => {\n  b;\n  dispatch({\n    type: REQUESTING\n  });\n  axios.get('http://localhost:3000/posts').then(post => {\n    dispatch({\n      type: POST_SUCCESS,\n      payload: post.data\n    });\n  });\n};\nexport const createPost = info => dispatch => {\n  dispatch({\n    type: REQUESTING\n  });\n  axios.post(`http://localhost:3000/posts`, info).then(post => {\n    dispatch({\n      type: CREATE_POST,\n      payload: post.data\n    });\n    console.log(post.data);\n  });\n};\nexport const deletePost = id => dispatch => {\n  return axios.delete(`http://localhost:3000/posts/${id}`).then(dispatch({\n    type: DELETE_POST,\n    id\n  }));\n};\nexport const editCaption = (id, info) => dispatch => {\n  dispatch({\n    type: REQUESTING\n  });\n  return axios.patch(`http://localhost:3000/posts/${id}`, {\n    caption: info\n  }).then(post => {\n    console.log(post.data);\n    dispatch({\n      type: EDIT_POST_CAPTION,\n      payload: post.data,\n      id,\n      requested: false\n    });\n  });\n};\nexport const changeLike = (id, numLikes, change) => dispatch => {\n  dispatch({\n    type: REQUESTING\n  });\n  axios.patch(`http://localhost:3000/posts/${id}`, {\n    likes: numLikes\n  }).then(data => console.log(\"From Likes action \", data), change === \"add\" ? dispatch({\n    type: ADD_LIKE,\n    id\n  }) : dispatch({\n    type: DELETE_LIKE,\n    id\n  }));\n};","map":{"version":3,"sources":["/Users/owner/Desktop/finalprojects/MyStagram/MyFront-end/src/redux/actions/PostActions.js"],"names":["REQUESTING","POST_SUCCESS","POST_FAILURE","CREATE_POST","DELETE_LIKE","ADD_LIKE","EDIT_POST_CAPTION","DELETE_POST","axios","getPost","dispatch","b","type","get","then","post","payload","data","createPost","info","console","log","deletePost","id","delete","editCaption","patch","caption","requested","changeLike","numLikes","change","likes"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,YAArB,EAAmCC,YAAnC,EAAiDC,WAAjD,EAA8DC,WAA9D,EAA2EC,QAA3E,EAAoFC,iBAApF,EAAuGC,WAAvG,QAA0H,SAA1H;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,OAAO,MAAMC,OAAO,GAAG,MAAMC,QAAQ,IAAI;AACrCC,EAAAA,CAAC;AACDD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEZ;AAAR,GAAD,CAAR;AACAQ,EAAAA,KAAK,CAACK,GAAN,CAAU,6BAAV,EACCC,IADD,CACMC,IAAI,IAAI;AACVL,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEX,YAAR;AAAsBe,MAAAA,OAAO,EAAED,IAAI,CAACE;AAApC,KAAD,CAAR;AACH,GAHD;AAQH,CAXM;AAYP,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAAUT,QAAQ,IAAI;AAC5CA,EAAAA,QAAQ,CAAK;AAAEE,IAAAA,IAAI,EAAEZ;AAAR,GAAL,CAAR;AACAQ,EAAAA,KAAK,CAACO,IAAN,CAAY,6BAAZ,EAA0CI,IAA1C,EACCL,IADD,CACMC,IAAI,IAAI;AAAEL,IAAAA,QAAQ,CAAE;AAACE,MAAAA,IAAI,EAACT,WAAN;AAAmBa,MAAAA,OAAO,EAACD,IAAI,CAACE;AAAhC,KAAF,CAAR;AAChBG,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACE,IAAjB;AACC,GAHD;AAKH,CAPM;AAQP,OAAO,MAAMK,UAAU,GAAGC,EAAD,IAAQb,QAAQ,IAAG;AACxC,SAAOF,KAAK,CAACgB,MAAN,CAAc,+BAA8BD,EAAG,EAA/C,EACNT,IADM,CACAJ,QAAQ,CAAE;AAACE,IAAAA,IAAI,EAACL,WAAN;AAAmBgB,IAAAA;AAAnB,GAAF,CADR,CAAP;AAGH,CAJM;AAMP,OAAO,MAAME,WAAW,GAAG,CAACF,EAAD,EAAKJ,IAAL,KAAcT,QAAQ,IAAI;AACjDA,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEZ;AAAR,GAAD,CAAR;AACF,SAAQQ,KAAK,CAACkB,KAAN,CAAa,+BAA8BH,EAAG,EAA9C,EAAiD;AAAEI,IAAAA,OAAO,EAAER;AAAX,GAAjD,EACDL,IADC,CACIC,IAAI,IAAI;AAAGK,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACE,IAAjB;AACtBP,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEN,iBAAR;AAA2BU,MAAAA,OAAO,EAAED,IAAI,CAACE,IAAzC;AAA8CM,MAAAA,EAA9C;AAAkDK,MAAAA,SAAS,EAAE;AAA7D,KAAD,CAAR;AACM,GAHC,CAAR;AAOD,CATM;AAUP,OAAO,MAAMC,UAAU,GAAG,CAACN,EAAD,EAAKO,QAAL,EAAeC,MAAf,KAA0BrB,QAAQ,IAAG;AAC3DA,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEZ;AAAR,GAAD,CAAR;AACCQ,EAAAA,KAAK,CAACkB,KAAN,CAAa,+BAA8BH,EAAG,EAA9C,EAAgD;AAAES,IAAAA,KAAK,EAAEF;AAAT,GAAhD,EACAhB,IADA,CACKG,IAAI,IAAIG,OAAO,CAACC,GAAR,CAAa,oBAAb,EAAkCJ,IAAlC,CADb,EAEDc,MAAM,KAAK,KAAX,GAAmBrB,QAAQ,CAAE;AAAEE,IAAAA,IAAI,EAAEP,QAAR;AAAkBkB,IAAAA;AAAlB,GAAF,CAA3B,GAAwDb,QAAQ,CAAE;AAAEE,IAAAA,IAAI,EAAER,WAAR;AAAqBmB,IAAAA;AAArB,GAAF,CAF/D;AAIJ,CANM","sourcesContent":["import { REQUESTING, POST_SUCCESS, POST_FAILURE, CREATE_POST, DELETE_LIKE, ADD_LIKE,EDIT_POST_CAPTION, DELETE_POST } from './types';\nimport axios from 'axios'\n\n\nexport const getPost = () => dispatch => {\n    b\n    dispatch({ type: REQUESTING })\n    axios.get('http://localhost:3000/posts')\n    .then(post => {\n        dispatch({ type: POST_SUCCESS, payload: post.data})\n    }\n\n    )\n    \n\n}\nexport const createPost = (info) => dispatch => {\n    dispatch   ( { type: REQUESTING} )\n    axios.post(`http://localhost:3000/posts`, info)\n    .then(post => { dispatch( {type:CREATE_POST, payload:post.data } )\n    console.log(post.data)\n    })\n\n}\nexport const deletePost =(id) => dispatch =>{\n    return axios.delete(`http://localhost:3000/posts/${id}`)\n    .then( dispatch ({type:DELETE_POST, id}) )\n\n}\n\nexport const editCaption = (id, info) => dispatch => {\n    dispatch({ type: REQUESTING })\n  return  axios.patch(`http://localhost:3000/posts/${id}`, { caption: info })\n        .then(post => {  console.log(post.data)\n   dispatch({ type: EDIT_POST_CAPTION, payload: post.data,id, requested: false })\n        }\n        \n    )\n\n}\nexport const changeLike = (id, numLikes, change) => dispatch =>{\n    dispatch({ type: REQUESTING })\n     axios.patch(`http://localhost:3000/posts/${id}`,{ likes: numLikes })\n    .then(data => console.log( \"From Likes action \",data),\n    change === \"add\" ? dispatch( { type: ADD_LIKE, id} ) :  dispatch( { type: DELETE_LIKE, id } )\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}