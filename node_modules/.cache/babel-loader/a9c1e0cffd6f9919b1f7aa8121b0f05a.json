{"ast":null,"code":"import _defineProperty from \"/Users/owner/Desktop/finalprojects/MyStagram/MyFront-end/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { REQUESTING, POST_SUCCESS, POST_FAILURE, CREATE_POST, EDIT_POST_CAPTION, ADD_LIKE, DELETE_LIKE, DELETE_POST, ADD_COMMENT, EDIT_COMMENT, DELETE_COMMENT } from '../actions/types';\nconst initialState = {\n  posts: [],\n  requested: null,\n  success: null,\n  errorMessage: \"\",\n  editingPost: false,\n  submittedComment: false\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    //POST PROPER\n    case REQUESTING:\n      return _objectSpread({}, state, {\n        requested: true\n      });\n\n    case POST_SUCCESS:\n      return _objectSpread({}, state, {\n        requested: false,\n        success: true,\n        posts: action.payload\n      });\n\n    case POST_FAILURE:\n      return _objectSpread({}, state, {\n        success: false,\n        requested: false,\n        errorMessage: action.payload\n      });\n\n    case CREATE_POST:\n      return _objectSpread({}, state, {\n        requested: false,\n        success: true,\n        posts: state.posts.concat(action.payload)\n      });\n\n    case EDIT_POST_CAPTION:\n      const idx = state.posts.findIndex(post => post.id === action.id);\n      const post = state.posts[idx];\n      const posts = [...state.posts.slice(0, idx), Object.assign({}, post, action.payload), ...state.posts.slice(idx + 1)];\n      return _objectSpread({}, state, {\n        posts\n      });\n    // COMMENTS \n\n    case EDIT_COMMENT:\n      const ixa = state.comments.findIndex(com => com.id === action.payload.id);\n      const com = state.comments[ixa];\n      return _objectSpread({}, state, {\n        comments: [state.comments.slice(0, ixa), Object.assign({}, com, action.payload), state.comments.slice(ixa + 1)]\n      });\n\n    case DELETE_COMMENT:\n      // {post_id: 2, content: \"Hilarious!!\", followee_id: 14}\n      const post2delete = state.posts[action.id.post_id];\n      debugger;\n      const comment2delete = post2delete.comments.find(comment => comment.includes(action.content));\n      return _objectSpread({}, state, {\n        comments: comms\n      });\n\n    case ADD_COMMENT:\n      const idb = state.posts.findIndex(post => post.id === action.payload.post_id);\n      const thePost = state.posts[idb];\n      const newPosts = [...state.posts.slice(0, idb), Object.assign({}, thePost, {\n        comments: [...thePost.comments, action.payload]\n      }), ...state.posts.slice(idb + 1)];\n      return _objectSpread({}, state, {\n        requested: false,\n        posts: newPosts\n      });\n    // LIKES\n\n    case ADD_LIKE:\n      const ix = state.posts.findIndex(p => p.id === action.id);\n      const likedpost = state.posts[ix];\n      return _objectSpread({}, state, {\n        requested: false,\n        posts: [...state.posts.slice(0, ix), Object.assign({}, likedpost, {\n          likes: likedpost.likes + 1\n        }), ...state.posts.slice(ix + 1)]\n      });\n\n    case DELETE_LIKE:\n      const iz = state.posts.findIndex(p => p.id === action.id);\n      const dislikedpost = state.posts[iz];\n\n      if (dislikedpost.likes > 0) {\n        return _objectSpread({}, state, {\n          requested: false,\n          posts: [...state.posts.slice(0, iz), Object.assign({}, dislikedpost, {\n            likes: dislikedpost.likes - 1\n          }), ...state.posts.slice(iz + 1)]\n        });\n      }\n\n    //END\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/owner/Desktop/finalprojects/MyStagram/MyFront-end/src/redux/reducers/PostReducer.js"],"names":["REQUESTING","POST_SUCCESS","POST_FAILURE","CREATE_POST","EDIT_POST_CAPTION","ADD_LIKE","DELETE_LIKE","DELETE_POST","ADD_COMMENT","EDIT_COMMENT","DELETE_COMMENT","initialState","posts","requested","success","errorMessage","editingPost","submittedComment","state","action","type","payload","concat","idx","findIndex","post","id","slice","Object","assign","ixa","comments","com","post2delete","post_id","comment2delete","find","comment","includes","content","comms","idb","thePost","newPosts","ix","p","likedpost","likes","iz","dislikedpost"],"mappings":"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","sourcesContent":["import {\n    REQUESTING, POST_SUCCESS, POST_FAILURE, CREATE_POST, EDIT_POST_CAPTION, ADD_LIKE, DELETE_LIKE, DELETE_POST, ADD_COMMENT, EDIT_COMMENT, DELETE_COMMENT\n} from '../actions/types'\n\nconst initialState = {\n    posts: [],\n    requested: null,\n    success: null,\n    errorMessage: \"\",\n    editingPost: false,\n    submittedComment: false,\n\n}\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        //POST PROPER\n        case REQUESTING:\n            return { ...state, requested: true }\n        case POST_SUCCESS:\n            return {\n                ...state, requested: false, success: true,\n                posts: action.payload\n            }\n        case POST_FAILURE:\n            return { ...state, success: false, requested: false, errorMessage: action.payload }\n        case CREATE_POST:\n            return {\n                ...state, requested: false, success: true,\n                posts: state.posts.concat(action.payload)\n            }\n        case EDIT_POST_CAPTION:\n\n            const idx = state.posts.findIndex(post => post.id === action.id)\n            const post = state.posts[idx]\n            const posts = [\n                ...state.posts.slice(0, idx),\n                Object.assign({}, post, action.payload),\n                ...state.posts.slice(idx + 1)\n            ]\n            return {\n                ...state,\n                posts\n            }\n\n        // COMMENTS \n\n\n        case EDIT_COMMENT:\n            const ixa = state.comments.findIndex(com => com.id === action.payload.id)\n            const com = state.comments[ixa]\n            return {\n                ...state,\n                comments: [state.comments.slice(0, ixa),\n                Object.assign({}, com, action.payload),\n                state.comments.slice(ixa + 1)]\n            }\n        case DELETE_COMMENT:\n                // {post_id: 2, content: \"Hilarious!!\", followee_id: 14}\n            const post2delete = state.posts[action.id.post_id]\n            debugger\n            const comment2delete = post2delete.comments.find(comment => comment.includes(action.content))\n           \n           \n            return {\n                ...state,\n                comments:comms\n            }\n        case ADD_COMMENT:\n            const idb = state.posts.findIndex(post => post.id === action.payload.post_id)\n            const thePost = state.posts[idb]\n            const newPosts = [...state.posts.slice(0, idb),\n            Object.assign({}, thePost, { comments: [...thePost.comments, action.payload] }), ...state.posts.slice(idb + 1)]\n\n            return {\n                ...state,\n                requested: false,\n                posts: newPosts\n\n\n            }\n\n        // LIKES\n        case ADD_LIKE:\n            const ix = state.posts.findIndex(p => p.id === action.id)\n            const likedpost = state.posts[ix]\n            return {\n                ...state,\n                requested: false,\n                posts: [...state.posts.slice(0, ix),\n                Object.assign({}, likedpost, { likes: likedpost.likes + 1 }),\n                ...state.posts.slice(ix + 1)\n                ]\n            }\n        case DELETE_LIKE:\n            const iz = state.posts.findIndex(p => p.id === action.id)\n            const dislikedpost = state.posts[iz]\n            if (dislikedpost.likes > 0) {\n                return {\n                    ...state,\n                    requested: false,\n                    posts: [...state.posts.slice(0, iz),\n                    Object.assign({}, dislikedpost, { likes: dislikedpost.likes - 1 }),\n                    ...state.posts.slice(iz + 1)\n                    ]\n                }\n            }\n\n\n        //END\n        default:\n            return state;\n    }\n\n}"]},"metadata":{},"sourceType":"module"}