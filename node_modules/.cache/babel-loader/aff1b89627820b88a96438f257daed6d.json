{"ast":null,"code":"import _defineProperty from \"/Users/owner/Desktop/finalprojects/MyStagram/MyFront-end/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { REQUEST_POST, POST_SUCCESS, POST_FAILURE, CREATE_POST, EDIT_POST_CAPTION, DELETE_POST, SUBMITTED_COMMENT, ADD_COMMENT, EDIT_COMMENT, DELETE_COMMENT } from '../actions/types';\nconst initialState = {\n  posts: [],\n  request: null,\n  success: null,\n  errorMessage: \"\"\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case REQUEST_POST:\n      return _objectSpread({}, state, {\n        request: true\n      });\n\n    case POST_SUCCESS:\n      return _objectSpread({}, state, {\n        request: false,\n        success: true,\n        post: action.payload\n      });\n\n    case POST_FAILURE:\n      return _objectSpread({}, state, {\n        success: false,\n        request: false,\n        errorMessage: action.payload\n      });\n\n    case CREATE_POST:\n      return _objectSpread({}, state, {\n        request: false,\n        success: true,\n        post: [...state.post, action.payload]\n      });\n\n    case EDIT_POST_CAPTION:\n      const idx = state.post.findIndex(post => post.id === action.payload.id);\n      const post = state.post[idx];\n      const posts = [];\n      return _objectSpread({}, state, {\n        post\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/owner/Desktop/finalprojects/MyStagram/MyFront-end/src/redux/reducers/PostReducer.js"],"names":["REQUEST_POST","POST_SUCCESS","POST_FAILURE","CREATE_POST","EDIT_POST_CAPTION","DELETE_POST","SUBMITTED_COMMENT","ADD_COMMENT","EDIT_COMMENT","DELETE_COMMENT","initialState","posts","request","success","errorMessage","state","action","type","post","payload","idx","findIndex","id"],"mappings":";;;;;;AAAA,SAASA,YAAT,EAAuBC,YAAvB,EAAqCC,YAArC,EAAmDC,WAAnD,EAAgEC,iBAAhE,EAAmFC,WAAnF,EACAC,iBADA,EACkBC,WADlB,EAC+BC,YAD/B,EAC6CC,cAD7C,QAEO,kBAFP;AAIA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,OAAO,EAAE,IAFQ;AAGjBC,EAAAA,OAAO,EAAE,IAHQ;AAIjBC,EAAAA,YAAY,EAAE;AAJG,CAArB;AAMA,gBAAe,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKjB,YAAL;AACI,+BAAYe,KAAZ;AAAmBH,QAAAA,OAAO,EAAE;AAA5B;;AACJ,SAAKX,YAAL;AACI,+BACOc,KADP;AACcH,QAAAA,OAAO,EAAE,KADvB;AAC8BC,QAAAA,OAAO,EAAE,IADvC;AAEIK,QAAAA,IAAI,EAAEF,MAAM,CAACG;AAFjB;;AAIJ,SAAKjB,YAAL;AACI,+BAAYa,KAAZ;AAAmBF,QAAAA,OAAO,EAAE,KAA5B;AAAmCD,QAAAA,OAAO,EAAE,KAA5C;AAAmDE,QAAAA,YAAY,EAAEE,MAAM,CAACG;AAAxE;;AACJ,SAAKhB,WAAL;AACI,+BACOY,KADP;AACcH,QAAAA,OAAO,EAAE,KADvB;AAC8BC,QAAAA,OAAO,EAAE,IADvC;AAEIK,QAAAA,IAAI,EAAE,CAAC,GAAGH,KAAK,CAACG,IAAV,EAAgBF,MAAM,CAACG,OAAvB;AAFV;;AAIJ,SAAKf,iBAAL;AACI,YAAMgB,GAAG,GAAGL,KAAK,CAACG,IAAN,CAAWG,SAAX,CAAqBH,IAAI,IAAIA,IAAI,CAACI,EAAL,KAAYN,MAAM,CAACG,OAAP,CAAeG,EAAxD,CAAZ;AACA,YAAMJ,IAAI,GAAGH,KAAK,CAACG,IAAN,CAAWE,GAAX,CAAb;AACA,YAAMT,KAAK,GAAG,EAAd;AAGA,+BACOI,KADP;AAEIG,QAAAA;AAFJ;;AAMJ;AACI,aAAOH,KAAP;AA5BR;AA+BH,CAhCD","sourcesContent":["import { REQUEST_POST, POST_SUCCESS, POST_FAILURE, CREATE_POST, EDIT_POST_CAPTION, DELETE_POST,\nSUBMITTED_COMMENT,ADD_COMMENT, EDIT_COMMENT, DELETE_COMMENT \n} from '../actions/types'\n\nconst initialState = {\n    posts: [],\n    request: null,\n    success: null,\n    errorMessage: \"\"\n}\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case REQUEST_POST:\n            return { ...state, request: true }\n        case POST_SUCCESS:\n            return {\n                ...state, request: false, success: true,\n                post: action.payload\n            }\n        case POST_FAILURE:\n            return { ...state, success: false, request: false, errorMessage: action.payload }\n        case CREATE_POST:\n            return {\n                ...state, request: false, success: true,\n                post: [...state.post, action.payload]\n            }\n        case EDIT_POST_CAPTION:\n            const idx = state.post.findIndex(post => post.id === action.payload.id)\n            const post = state.post[idx]\n            const posts = [\n\n            ]\n            return {\n                ...state,\n                post\n\n            }\n\n        default:\n            return state;\n    }\n\n}"]},"metadata":{},"sourceType":"module"}