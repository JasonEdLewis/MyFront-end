{"ast":null,"code":"import React from 'react';\nimport { storage } from '../firebase/index';\nimport { connect } from 'react-redux';\nimport { picUrl } from \"../redux/actions/UserActions\";\n\nconst PicUploader = image => {\n  console.log(\"Pic to Upload from Sign-Up\", image);\n\n  if (image) {\n    const uploadTask = storage.ref(\"images/\".concat(image.name)).put(image);\n    uploadTask.on('state_changed', snapshot => {}, error => {\n      console.log(error);\n    }, () => {\n      storage.ref('images').child(image.name).getDownloadURL().then(url => {\n        debugger;\n        return url;\n      });\n    });\n  }\n};\n\nexport default connect(null, {\n  picUrl\n})(PicUploader);","map":{"version":3,"sources":["/Users/owner/Desktop/finalprojects/MyStagram/MyFront-end/src/components/PicUploader.js"],"names":["React","storage","connect","picUrl","PicUploader","image","console","log","uploadTask","ref","name","put","on","snapshot","error","child","getDownloadURL","then","url"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,QAAuB,8BAAvB;;AAIC,MAAMC,WAAW,GAAGC,KAAD,IAAU;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAAyCF,KAAzC;;AAEA,MAAGA,KAAH,EAAS;AACR,UAAMG,UAAU,GAAGP,OAAO,CAACQ,GAAR,kBAAsBJ,KAAK,CAACK,IAA5B,GAAoCC,GAApC,CAAwCN,KAAxC,CAAnB;AAEDG,IAAAA,UAAU,CAACI,EAAX,CAAc,eAAd,EAAgCC,QAAD,IAAa,CAE3C,CAFD,EAGGC,KAAD,IAAW;AACTR,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AAED,KANH,EAOE,MAAM;AACJb,MAAAA,OAAO,CAACQ,GAAR,CAAY,QAAZ,EAAsBM,KAAtB,CAA4BV,KAAK,CAACK,IAAlC,EAAwCM,cAAxC,GAAyDC,IAAzD,CAA8DC,GAAG,IAAI;AACnE;AACD,eAAOA,GAAP;AAEA,OAJD;AAKH,KAbD;AAcH;AACI,CArBJ;;AAuBD,eAAehB,OAAO,CAAC,IAAD,EAAO;AAACC,EAAAA;AAAD,CAAP,CAAP,CAAwBC,WAAxB,CAAf","sourcesContent":["\nimport React from 'react';\nimport { storage } from '../firebase/index';\nimport { connect } from 'react-redux';\nimport { picUrl } from \"../redux/actions/UserActions\"\n\n\n\n const PicUploader= (image)=> {\n    console.log(\"Pic to Upload from Sign-Up\",image)\n\n    if(image){\n     const uploadTask = storage.ref(`images/${image.name}`).put(image);\n\n    uploadTask.on('state_changed', (snapshot)=> {\n     \n    },\n      (error) => {\n        console.log(error);\n\n      },\n      () => {\n        storage.ref('images').child(image.name).getDownloadURL().then(url => {\n          debugger\n         return url\n\n        })\n    })\n}\n    }\n  \nexport default connect(null, {picUrl})(PicUploader)\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}