{"ast":null,"code":"import { USER_REQUEST, USER_SUCCESS, USER_FAILURE, GET_ALL, CREATE_USER, UPDATE_USER, DELETE_USER, FINISHED_REQUESTING } from '../actions/types';\nimport axios from 'axios';\nexport const fetchAllUsers = () => async dispatch => {\n  const users = await axios.get('http://localhost:3000/users');\n\n  const usersObj = () => {\n    const obj = {};\n    users.data.forEach(user => obj[user.id] = user.username);\n    return obj;\n  };\n\n  console.log(\"User object from fetch all users\", usersObj());\n  dispatch({\n    type: GET_ALL,\n    payload: users.data,\n    usersObj: usersObj(),\n    requested: false\n  });\n};\nexport const fetchUser = token => async dispatch => {\n  dispatch({\n    type: USER_REQUEST\n  });\n  const config = {\n    headers: {\n      \"Content-Type\": \"Application/json\",\n      Authorization: token\n    }\n  };\n  const user = await axios.get('http://localhost:3000/profile', config);\n  console.log(user.username);\n  !!user ? dispatch({\n    type: USER_SUCCESS,\n    payload: user.data\n  }) : dispatch({\n    type: USER_FAILURE,\n    payload: user.message\n  });\n  !!user && localStorage.setItem(\"currentUser\", user.data.username, 'currentUserId', user.data.id, user.data.bio, user.data.city, user.data.state);\n  return console.log(\"From fetch User in UsersActions\", user.data);\n};\nexport const newUser = info => dispatch => {\n  dispatch({\n    type: USER_REQUEST\n  });\n  return axios.post('http://localhost:3000/signup', info).then(user => dispatch({\n    type: CREATE_USER,\n    payload: user.data,\n    requested: false\n  }));\n};\nexport const editUser = (user_id, info) => {\n  return fetch(\"http://localhost:3000/users/\".concat(user_id), {\n    method: \"PATCH\",\n    headers: {\n      'Content Type': 'Application/json'\n    }\n  });\n};\nexport const deleteUser = id => dispatch => {\n  dispatch({\n    type: USER_REQUEST\n  });\n  localStorage.clear();\n  return axios.delete(\"http://localhost:3000/users/\".concat(id)).then(dispatch({\n    type: DELETE_USER,\n    id,\n    requested: false\n  })).then(dispatch({\n    type: FINISHED_REQUESTING\n  }));\n};","map":{"version":3,"sources":["/Users/owner/Desktop/finalprojects/MyStagram/MyFront-end/src/redux/actions/UserActions.js"],"names":["USER_REQUEST","USER_SUCCESS","USER_FAILURE","GET_ALL","CREATE_USER","UPDATE_USER","DELETE_USER","FINISHED_REQUESTING","axios","fetchAllUsers","dispatch","users","get","usersObj","obj","data","forEach","user","id","username","console","log","type","payload","requested","fetchUser","token","config","headers","Authorization","message","localStorage","setItem","bio","city","state","newUser","info","post","then","editUser","user_id","fetch","method","deleteUser","clear","delete"],"mappings":"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","sourcesContent":["import { USER_REQUEST, USER_SUCCESS, USER_FAILURE, GET_ALL, CREATE_USER, UPDATE_USER, DELETE_USER, FINISHED_REQUESTING } from '../actions/types';\nimport axios from 'axios';\n\nexport const fetchAllUsers = () => async dispatch => {\n    const users = await axios.get('http://localhost:3000/users');\n    const usersObj = () => {\n        const obj = {}\n        users.data.forEach(user => obj[user.id] = user.username)\n        return obj\n    }\n    console.log(\"User object from fetch all users\", usersObj())\n    dispatch({ type: GET_ALL, payload: users.data, usersObj: usersObj(), requested: false });\n\n}\nexport const fetchUser = (token) => async dispatch => {\n    dispatch({ type: USER_REQUEST })\n    const config = {\n        headers: {\n            \"Content-Type\": \"Application/json\",\n            Authorization: token\n        }\n    }\n    const user = await axios.get('http://localhost:3000/profile', config);\n    console.log(user.username)\n    !!user ? dispatch({ type: USER_SUCCESS, payload: user.data })\n        : dispatch({ type: USER_FAILURE, payload: user.message })\n\n    !!user && localStorage.setItem(\"currentUser\", user.data.username, 'currentUserId', user.data.id, user.data.bio, user.data.city, user.data.state)\n    return console.log(\"From fetch User in UsersActions\", user.data);\n\n}\n\nexport const newUser = (info) => dispatch => {\n    dispatch({ type: USER_REQUEST })\n    return axios.post('http://localhost:3000/signup', info).then(user => dispatch({ type: CREATE_USER, payload: user.data, requested: false })\n    )\n}\nexport const editUser = (user_id, info) =>{\n    return fetch(`http://localhost:3000/users/${user_id}`,{\n    method: \"PATCH\",\n    headers:{\n        'Content Type': 'Application/json'\n    }\n\n}\n    )\n}\nexport const deleteUser = (id) => dispatch => {\n    dispatch({ type: USER_REQUEST })\n    localStorage.clear()\n    return axios.delete(`http://localhost:3000/users/${id}`)\n        .then(dispatch({ type: DELETE_USER, id, requested: false }))\n        .then(dispatch({ type: FINISHED_REQUESTING }))\n\n\n\n}\n"]},"metadata":{},"sourceType":"module"}