{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst stream_1 = require(\"stream\");\n\nclass ResourceStream extends stream_1.Transform {\n  constructor(args, requestFn) {\n    const options = Object.assign({\n      objectMode: true\n    }, args.streamOptions);\n    super(options);\n    this._ended = false;\n    this._maxApiCalls = args.maxApiCalls === -1 ? Infinity : args.maxApiCalls;\n    this._nextQuery = args.query;\n    this._reading = false;\n    this._requestFn = requestFn;\n    this._requestsMade = 0;\n    this._resultsToSend = args.maxResults === -1 ? Infinity : args.maxResults;\n  } // tslint:disable-next-line:no-any\n\n\n  end(...args) {\n    this._ended = true;\n    return super.end(...args);\n  }\n\n  _read() {\n    if (this._reading) {\n      return;\n    }\n\n    this._reading = true;\n\n    this._requestFn(this._nextQuery, (err, results, nextQuery) => {\n      if (err) {\n        this.destroy(err);\n        return;\n      }\n\n      this._nextQuery = nextQuery;\n\n      if (this._resultsToSend !== Infinity) {\n        results = results.splice(0, this._resultsToSend);\n        this._resultsToSend -= results.length;\n      }\n\n      let more = true;\n\n      for (const result of results) {\n        if (this._ended) {\n          break;\n        }\n\n        more = this.push(result);\n      }\n\n      const isFinished = !this._nextQuery || this._resultsToSend < 1;\n      const madeMaxCalls = ++this._requestsMade >= this._maxApiCalls;\n\n      if (isFinished || madeMaxCalls) {\n        this.end();\n      }\n\n      if (more && !this._ended) {\n        setImmediate(() => this._read());\n      }\n\n      this._reading = false;\n    });\n  }\n\n}\n\nexports.ResourceStream = ResourceStream;","map":null,"metadata":{},"sourceType":"script"}